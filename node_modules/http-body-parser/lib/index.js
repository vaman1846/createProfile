'use strict';

var _JsonParser = require('./JsonParser');

var _JsonParser2 = _interopRequireDefault(_JsonParser);

var _FormParser = require('./FormParser');

var _FormParser2 = _interopRequireDefault(_FormParser);

var _TextParser = require('./TextParser');

var _TextParser2 = _interopRequireDefault(_TextParser);

var _MultipartParser = require('./MultipartParser');

var _MultipartParser2 = _interopRequireDefault(_MultipartParser);

var _StreamParser = require('./StreamParser');

var _StreamParser2 = _interopRequireDefault(_StreamParser);

var _ParserFactory = require('./ParserFactory');

var _ParserFactory2 = _interopRequireDefault(_ParserFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.koa = (options = {}) => (() => {
  var _ref = _asyncToGenerator(function* (ctx, next) {
    // new parserFactory
    const parserFactory = new _ParserFactory2.default(ctx.req, options.enableTypes);
    // add parser to factory
    parserFactory.addParser('json', _JsonParser2.default, options.json);
    parserFactory.addParser('form', _FormParser2.default, options.form);
    parserFactory.addParser('text', _TextParser2.default, options.text);
    parserFactory.addParser('multipart', _MultipartParser2.default, options.multipart);
    parserFactory.addParser('stream', _StreamParser2.default, options.stream);
    // get request body
    const body = yield parserFactory.getBody();
    // parse body
    const parser = parserFactory.getEnableParser(body);
    if (parser) {
      ctx.request.rawBody = body;
      ctx.request.body = parser.parse();
    }
    yield next();
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

exports.express = (options = {}) => (() => {
  var _ref2 = _asyncToGenerator(function* (req, res, next) {
    try {
      // new parserFactory
      const parserFactory = new _ParserFactory2.default(req, options.enableTypes);
      // add parser to factory
      parserFactory.addParser('json', _JsonParser2.default, options.json);
      parserFactory.addParser('form', _FormParser2.default, options.form);
      parserFactory.addParser('text', _TextParser2.default, options.text);
      parserFactory.addParser('multipart', _MultipartParser2.default, options.multipart);
      parserFactory.addParser('stream', _StreamParser2.default, options.stream);
      // get request body
      const body = yield parserFactory.getBody();
      // parse body
      const parser = parserFactory.getEnableParser(body);
      if (parser) {
        req.rawBody = body;
        req.body = parser.parse();
      }
    } catch (e) {
      return next(e);
    }
    yield next();
  });

  return function (_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
})();
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MultipartParser {
  constructor(body, headers, limit = 1024 * 1024, path = _os2.default.tmpdir()) {
    this.body = body;
    this.headers = headers;
    this.limit = limit;
    this.path = path;
    this.boundary = Buffer.from(`--${headers['content-type'].split(';').pop().replace('boundary=', '').trim()}`);
  }

  parse() {
    let begin = 0;
    const body = {};
    while (begin < this.body.length) {
      const end = this.body.indexOf(this.boundary, begin + this.boundary.length);
      if (end === -1) {
        break;
      }
      const fieldStart = begin + this.boundary.length + 2;
      const fieldEnd = this.body.indexOf(Buffer.from([0x0d, 0x0a]), fieldStart);
      const field = this.body.slice(fieldStart, fieldEnd);
      const nameMatch = field.toString().match(/\bname=("([^"]*)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t/]+))/i);
      const filenameMatch = field.toString().match(/\bfilename=("(.*?)"|([^\(\)<>@,;:\\"\/\[\]\?=\{\}\s\t/]+))($|;\s)/i);
      if (!nameMatch) {
        break;
      }
      if (!filenameMatch) {
        const valueStart = fieldEnd + 2 + 2;
        const valueEnd = this.body.indexOf(Buffer.from([0x0d, 0x0a]), valueStart);
        const value = this.body.slice(valueStart, valueEnd);
        body[nameMatch[2]] = value.toString();
      } else {
        const valueStart = this.body.indexOf(Buffer.from([0x0d, 0x0a]), fieldEnd + 2) + 2 + 2;
        const valueEnd = this.body.indexOf(Buffer.from([0x0d, 0x0a]), valueStart);
        const value = this.body.slice(valueStart, valueEnd);
        body[nameMatch[2]] = {
          name: filenameMatch[2],
          path: _path2.default.join(this.path, filenameMatch[2]),
          mimetype: null,
          size: value.length,
          sha256: _crypto2.default.createHash('sha256').update(value).digest('hex')
        };
        _fs2.default.writeFileSync(_path2.default.join(this.path, filenameMatch[2]), value);
      }
      begin = end;
    }
    return body;
  }

  static getTypes(extendsTypes = []) {
    const originTypes = new Array('multipart/form-data');
    return Array.from(new Set(originTypes.concat(extendsTypes)));
  }
}

exports.default = MultipartParser;